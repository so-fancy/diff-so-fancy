#!/bin/bash

[ $# -ge 1 -a -f "$1" ] && input="$1" || input="-"

# find my sed
hash gsed 2> /dev/null && SED=gsed || SED=sed

# find my diff-highlight
if hash diff-highlight 2> /dev/null; then
	diff_highlight=diff-highlight
else
	SCRIPT_PATH=$( cd $(dirname $(readlink $0 || echo $0)) ; pwd -P )
	diff_highlight="$SCRIPT_PATH/third_party/diff-highlight/diff-highlight"
fi

CSI=$'\x1b\['
color_code_regex="(($CSI([0-9]{1,3}(;[0-9]{1,3}){0,3})[m|K])?)"
reset_color=$'\x1b\[0?m'
dim_magenta=$'\x1b\[38;05;146m'
invert_color=$'\x1b\[7m'

git_index_line_pattern="^($color_code_regex)index .*"

format_diff_header () {
    # simplify the unified patch diff header
	$SED -E -e "s/^($color_code_regex)diff --git .*$//" | \
	$SED -E -e "/($git_index_line_pattern)/{N;s/$git_index_line_pattern\n//;}" | \
	$SED -E "s/^($color_code_regex)\-\-\-(.*)$/\1$(print_horizontal_rule)\\
\1\-\-\-\6/g" | \
	$SED -E "s/^($color_code_regex)\+\+\+(.*)$/\1\+\+\+\6\\
\1$(print_horizontal_rule)/g"
}

colorize_context_line () {
	# extra color for @@ context line
	$SED -E "s/@@$reset_color $reset_color(.*$)/@@ $dim_magenta\1/g"
}

mark_empty_lines () {
	$SED -E "s/^($color_code_regex)[\+\-]$reset_color\s*$/$invert_color\1 $reset_color/g"
}

strip_leading_symbols () {
	# strip the + and -
	$SED -E "s/^($color_code_regex)[\ \+\-]/\1/g"
}

print_horizontal_rule () {
	printf "%$(tput cols)s\n"| $SED 's/ /â”€/g'
}

# run it.
cat $input | $diff_highlight | format_diff_header | colorize_context_line | mark_empty_lines | strip_leading_symbols
